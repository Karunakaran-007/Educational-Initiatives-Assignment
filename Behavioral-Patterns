OBSERVER PATTERN
import java.util.ArrayList;
import java.util.List;

// Observer Interface
interface Observer {
    void update(String stockName, double price);
}

// Concrete Observer
class StockViewer implements Observer {
    private String name;

    public StockViewer(String name) {
        this.name = name;
    }

    @Override
    public void update(String stockName, double price) {
        System.out.println(name + " is viewing the updated price of " + stockName + ": $" + price);
    }
}

// Subject Interface
interface StockSubject {
    void registerObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers();
}

// Concrete Subject
class Stock implements StockSubject {
    private String stockName;
    private double price;
    private List<Observer> observers = new ArrayList<>();

    public Stock(String stockName, double price) {
        this.stockName = stockName;
        this.price = price;
    }

    public void setPrice(double price) {
        this.price = price;
        notifyObservers();
    }

    @Override
    public void registerObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(stockName, price);
        }
    }
}

public class ObserverPatternDemo {
    public static void main(String[] args) {
        Stock appleStock = new Stock("Apple", 145.00);
        
        StockViewer viewer1 = new StockViewer("Viewer 1");
        StockViewer viewer2 = new StockViewer("Viewer 2");
        
        appleStock.registerObserver(viewer1);
        appleStock.registerObserver(viewer2);
        
        appleStock.setPrice(150.00); // All observers will be notified
    }
}

